                               Utilisation de la Bibliothèque EOS
                               ==================================


 La Bibliothèque EOS permet de calculer, pour un Modèle
 Thermodynamique (M.T.) et une Equation Fluide (E.F.) donnés,
 les Caractéristiques Thermodynamiques (C.T.) principalement 
 dans les Plans Thermodynamiques Pression-enthalpie et Pression-Température
 (P.T. P-h et P-T) et dans la Zone de Saturation en fonction de la Pression
 (Psat) ou de la Température (Tsat).

 Nous décrivons ici les opérations en six étapes, à réaliser par l'Utilisateur
 de la Bibliothèque EOS, sur un système d'exploitation UNIX, pour effectuer des
 calculs de Caractéristiques Thermodynamiques (C.T.) à l'aide d'un code 
 programmé en Langage C++ :

 Etape 1 : Etablissement de l'environnement des calculs thermodynamiques
           Modèles Thermodynamiques (M.T.), Equations Fluides (E.F.)
           Plan Thermodynamique ou Zone de Saturation
           on pourra s'aider de "L'Utilitaire eos_mec" ci-dessous
 
 Etape 2 : Choix des Caractéristiques Thermodynamiques (C.T.) à calculer
           on pourra s'aider de "L'Utilitaire eos_mec" ci-dessous
 
 Etape 3 : Programmation du code client
           cf. "Aide à la programmation" ci-dessous 

 Etape 4 : Compilation, édition de liens et création de l'Exécutable
           cf. ci-dessous pour plus de détails

 Etape 5 : Etape optionnelle donnant la possibilité de modifier 
           les données des M.T.
           cf. "Modification des données des M.T." ci-dessous 

 Etape 6 : Exécution de l'Exécutable

 Nous donnons ci-dessous un "Exemple d'un code client" 
 et son "Résultat d'exécution"

 Les données d'entrée et les résultats de calcul de Caractéristiques
 Thermodynamiques peuvent être affichés à l'aide d'une I.H.M.,
 cette Interface est lancé par la commande  en ligne  'eos gui'



 L'utilitaire es_mec 
 -------------------

 Print available Fluids for this EOS installation,
 the two compulsory variables to define EOS object
 - EOS Thermodynamic Model (E.T.M.)
 - Equation of Fluid       (E.F.)
 and Thermodynamic Properties (T.P.)  to calculate

 Data directory used    : /dlocal/michel/EOSe/1.6.1/eos-1.6.1/data
 Include directory used : /dlocal/michel/EOSe/1.6.1/eos-1.6.1/include

 Usage :

 eos_mec  -h            : help

 eos_mec  -tm           : list of EOS Thermodynamic Models
 eos_mec  -tm all       : list of Equation of Fluid by E.T.M.
 eos_mec  -tm [tm_name] : list of Equation of Fluid for a E.T.M.

 eos_mec  -f            : list of Fluids
 eos_mec  -f  all       : list of E.F. and E.T.M. by fluid
 eos_mec  -f  [fl_name] : list of E.F. and E.T.M. for a fluid

 eos_mec  -tp           : Thermodynamic Properties : help
 eos_mec  -tp all       : list of T.P
 eos_mec  -tp [tp_type] : list of T.P. from particular type


 Aide à la programmation
 -----------------------

 Le fichier du programme principal en langage C++ doit contenir
 l'entête suivant :
    #include "EOS/API/EOS.hxx"
    #include "EOS/API/EOS_Std_Error_Handler.hxx"
    #include "EOS/API/EOS_Config.hxx"
    using namespace NEPTUNE ;

 Ce programme doit tout d'abord définir un objet EOS avec 
 le couple (M.T., E.F.) :
 e.g. : EOS *obj_eos ; obj_eos = new EOS("EOS_Cathare2", "WaterLiquid") ;
 on peut afficher les caractéristiques de cet objet EOS par : cout << *obj_eos ;

 On peut ensuite afficher, à l'aide des méthodes get_*,
 les constantes au point critique : Pcrit, hcrit, Tcrit
 ou les valeurs maximales du Modèle :  Pmin, Pmax, hmin, hmax

 Pour obtenir les C.T., on définit les données d'entrée et 
 le(s) tableau(x) résultat(s) et on applique une ou des méthode(s) de calcul 
 compute  sur l'objet EOS.
 On trouvera dans le fichier $REPI/include/EOS/API/EOS.hxx 
 les signatures des différentes méthodes possibles :
 e.g. les méthodes compute_Ph, compute_PT, compute_Psat, compute_Tsat permettent
      le calcul respectivement dans le Plan P-h, P-T, la courbe de saturation en
      fonction de Psat et Tsat

 On notera également que pour utiliser le M.T. Reprop, il est nécessaire 
 que l'Utilisateur appartienne au groupe UNIX refprop.

 cf. "Exemple d'un code client : example.cxx" ci-dessous



 Compilation, édition de liens
 -----------------------------

 a- Soit le nom du répertoire d'Installation d'EOS : $PREF

 b- Définir les variables d'environnement : 
    export EOS_HOME=$PREF
    export EOS_USER_DATA=$PREF/data
    export PATH=$PREF/bin:$PATH
    export CPATH=$PREF/include:$CPATH
    export LD_LIBRARY_PATH=$PREF/lib:$LD_LIBRARY_PATH

 c- Eventuellement ajouter la localisation de la Bibliothèque MED
    . soit $LIB_MED le nom du répertoire contenant les fichiers bibliothéques MED
    . export LD_LIBRARY_PATH=$LIB_MED:$LD_LIBRARY_PATH

 d- compilation et édition de liens du code client example.cxx
    - avec utilisation de la bibliothèque dynamique d'EOS
      g++  -o example -Wall -L${LIB_MED} -lmed -L$EOS_HOME/lib example.cxx -leos

    - avec utilisation de la bibliothèque statique d'EOS
      g++  -o example -Wall -lgfortran -L${LIB_MED} -lmed example.cxx $EOS_HOME/lib/libeos.a


 Modification des données des M.T.
 --------------------------------

 Après l'installation d'EOS, les données des M.T. résident dans le 
 répertoire $REPI/data.

 L'Utilisateur peut créer un répertoire $REPUSER, y copier des données de M.T.
 de $REPI/data et les modifier.

 Les nouvelles données des M.T. de $REPUSER seront prises en compte lors
 d'une exécution d'un programme s'appuyant sur l'Application EOS grâce
 à la commande en ligne : export USER_EOS_DATA=$REPUSER



 Exemple d'un code client : example.cxx
 ------------------------

 #include "EOS/API/EOS.hxx"
 #include "EOS/API/EOS_Std_Error_Handler.hxx"
 #include "EOS/API/EOS_Config.hxx"
 using namespace NEPTUNE ;
 
 int main()
 {  EOS *obj_eos ;
    obj_eos = new EOS("EOS_Cathare2", "WaterLiquid") ;
    EOS_Error er ;
 
    cout << endl ;
    cout << " . obj_eos = "        << *obj_eos ;

    double pc, hc, Tc ;
    double pmin, pmax, hmin, hmax ;
    cout << endl ;
    obj_eos->get_p_crit(pc)  ; cout << " - Pcrit = " << pc   << " Pa"   << endl ;
    obj_eos->get_h_crit(hc)  ; cout << " - hcrit = " << hc   << " J/kg" << endl ;
    obj_eos->get_T_crit(Tc)  ; cout << " - Tcrit = " << Tc   << " K"    << endl ;
    obj_eos->get_p_min(pmin) ; cout << " - Pmin  = " << pmin << " Pa"   << endl ;
    obj_eos->get_p_max(pmax) ; cout << " - Pmax  = " << pmax << " Pa"   << endl ;
    obj_eos->get_h_min(hmin) ; cout << " - hmin  = " << hmin << " J/kg" << endl ;
    obj_eos->get_h_max(hmax) ; cout << " - hmax  = " << hmax << " J/kg" << endl ;
 
    // f(P,h) : compute Fields in one point
    double pression[1] , enthalpi[1] ;
    double resulta1[1] ;
    double resulta2[1] ;
    double resulta3[1] ;
    double resulta4[1] ;
    double resulta5[1] ;
    double resulta6[1] ;
    double resulta7[1] ;
    int terr[1] ;
    int nbpoint = 1 ;
    pression[0] = 219.9e5 ;
    enthalpi[0] = 1.7e6 ;
 
    EOS_Field fpression("P","P",nbpoint,pression) ;
    EOS_Field fenthalpi("h","h",nbpoint,enthalpi) ;
    EOS_Fields vfresultat(7) ;
    EOS_Field fresulta1("T",               "T",            nbpoint,resulta1); vfresultat[0] = fresulta1 ;
    EOS_Field fresulta2("cp",              "cp",           nbpoint,resulta2); vfresultat[1] = fresulta2 ;
    EOS_Field fresulta3("lambda",          "lambda",       nbpoint,resulta3); vfresultat[2] = fresulta3 ;
    EOS_Field fresulta4("mu",              "mu",           nbpoint,resulta4); vfresultat[3] = fresulta4 ;
    EOS_Field fresulta5("rho",             "rho",          nbpoint,resulta5); vfresultat[4] = fresulta5 ;
    EOS_Field fresulta6("[d(rho)/dP]h",    "[d(rho)/dP]h", nbpoint,resulta6); vfresultat[5] = fresulta6 ;
    EOS_Field fresulta7("[d(rho)/dh]P",    "[d(rho)/dh]P", nbpoint,resulta7); vfresultat[6] = fresulta7 ;
    EOS_Error_Field ferr(nbpoint, terr) ;
 
    er = obj_eos->compute(fpression, fenthalpi, vfresultat, ferr) ;
 
    cout << endl << endl ;
    cout << " f(P,h) : Fields in one point" << endl ;
    cout << " .  er              = " << er              << endl ;
    if (er == 0)
       { cout << "   (i) Pressure     = " << fpression[0]       << endl ;
         cout << "   (i) Enthalpy     = " << fenthalpi[0]       << endl ;
         cout << "   ---" << endl ;
         cout << "   (o) T            = " << vfresultat[0][0]   << endl ;
         cout << "   (o) cp           = " << vfresultat[1][0]   << endl ;
         cout << "   (o) lambda       = " << vfresultat[2][0]   << endl ;
         cout << "   (o) mu           = " << vfresultat[3][0]   << endl ;
         cout << "   (o) rho          = " << vfresultat[4][0]   << endl ;
         cout << "   (o) [d(rho)/dP]h = " << vfresultat[5][0]   << endl ;
         cout << "   (o) [d(rho)/dh]P = " << vfresultat[6][0]   << endl ;
       }
    else
       cout << "   Erreur f(P,h)" << endl ;
    
    delete obj_eos ;
    return 0 ;
 }


 Résultat d'exécution :
 --------------------
  . obj_eos = Model table      : Cathare2
    Version           : v25_3_mod7.71
    Fluid             : Water
    Equation of fluid : WaterLiquid
    p_min : 1000 
    p_max : 2.6e+07
    T_min : 269.15 
    T_max : 673.15
    h_min : 100 
    h_max : 2.4e+06


 - Pcrit = 2.212e+07 Pa
 - hcrit = 1.99115e+06 J/kg
 - Tcrit = 647.844 K
 - Pmin  = 1000 Pa
 - Pmax  = 2.6e+07 Pa
 - hmin  = 100 J/kg
 - hmax  = 2.4e+06 J/kg


 f(P,h) : Fields in one point
 .  er              = 0
   (i) Pressure     = 2.199e+07
   (i) Enthalpy     = 1.7e+06
   ---
   (o) T            = 630.082
   (o) cp           = 9707.52
   (o) lambda       = 0.418563
   (o) mu           = 7.73333e-05
   (o) rho          = 578.664
   (o) [d(rho)/dP]h = 3.05156e-06
   (o) [d(rho)/dh]P = -0.00053107
